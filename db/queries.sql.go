// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package yogo

import (
	"context"
	"database/sql"
	"time"
)

const createInterest = `-- name: CreateInterest :one
INSERT INTO interests (
    interest_name, interest_img
) VALUES(
    $1, $2
) RETURNING id, interest_name, interest_img, updatedat
`

type CreateInterestParams struct {
	InterestName string `json:"interestName"`
	InterestImg  string `json:"interestImg"`
}

func (q *Queries) CreateInterest(ctx context.Context, arg CreateInterestParams) (Interest, error) {
	row := q.queryRow(ctx, q.createInterestStmt, createInterest, arg.InterestName, arg.InterestImg)
	var i Interest
	err := row.Scan(
		&i.ID,
		&i.InterestName,
		&i.InterestImg,
		&i.Updatedat,
	)
	return i, err
}

const createPlace = `-- name: CreatePlace :one
INSERT INTO places (
    place_name, location,location_name,palce_img,interest_id
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, place_name, location, location_name, palce_img, interest_id
`

type CreatePlaceParams struct {
	PlaceName    string `json:"placeName"`
	Location     string `json:"location"`
	LocationName string `json:"locationName"`
	PalceImg     string `json:"palceImg"`
	InterestID   int32  `json:"interestID"`
}

func (q *Queries) CreatePlace(ctx context.Context, arg CreatePlaceParams) (Place, error) {
	row := q.queryRow(ctx, q.createPlaceStmt, createPlace,
		arg.PlaceName,
		arg.Location,
		arg.LocationName,
		arg.PalceImg,
		arg.InterestID,
	)
	var i Place
	err := row.Scan(
		&i.ID,
		&i.PlaceName,
		&i.Location,
		&i.LocationName,
		&i.PalceImg,
		&i.InterestID,
	)
	return i, err
}

const createTrip = `-- name: CreateTrip :one
INSERT INTO trips (
    trip_name, duration, cost, start_date, status, orgernizer
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, trip_name, cost, duration, start_date, status, orgernizer
`

type CreateTripParams struct {
	TripName   string    `json:"tripName"`
	Duration   int32     `json:"duration"`
	Cost       int32     `json:"cost"`
	StartDate  time.Time `json:"startDate"`
	Status     int32     `json:"status"`
	Orgernizer int32     `json:"orgernizer"`
}

func (q *Queries) CreateTrip(ctx context.Context, arg CreateTripParams) (Trip, error) {
	row := q.queryRow(ctx, q.createTripStmt, createTrip,
		arg.TripName,
		arg.Duration,
		arg.Cost,
		arg.StartDate,
		arg.Status,
		arg.Orgernizer,
	)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.TripName,
		&i.Cost,
		&i.Duration,
		&i.StartDate,
		&i.Status,
		&i.Orgernizer,
	)
	return i, err
}

const createTripMember = `-- name: CreateTripMember :one
INSERT INTO trip_members (
    trip_id, member
) VALUES (
    $1, $2
) RETURNING id, trip_id, member
`

type CreateTripMemberParams struct {
	TripID int32 `json:"tripID"`
	Member int32 `json:"member"`
}

func (q *Queries) CreateTripMember(ctx context.Context, arg CreateTripMemberParams) (TripMember, error) {
	row := q.queryRow(ctx, q.createTripMemberStmt, createTripMember, arg.TripID, arg.Member)
	var i TripMember
	err := row.Scan(&i.ID, &i.TripID, &i.Member)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  email,username, profile_pic, status
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, email, username, status, profile_pic, createdat, updatedat
`

type CreateUserParams struct {
	Email      string         `json:"email"`
	Username   string         `json:"username"`
	ProfilePic sql.NullString `json:"profilePic"`
	Status     int32          `json:"status"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.Email,
		arg.Username,
		arg.ProfilePic,
		arg.Status,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Status,
		&i.ProfilePic,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const getInterest = `-- name: GetInterest :one
SELECT id, interest_name, interest_img, updatedat FROM interests
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetInterest(ctx context.Context, id int32) (Interest, error) {
	row := q.queryRow(ctx, q.getInterestStmt, getInterest, id)
	var i Interest
	err := row.Scan(
		&i.ID,
		&i.InterestName,
		&i.InterestImg,
		&i.Updatedat,
	)
	return i, err
}

const getTrip = `-- name: GetTrip :one
SELECT id, trip_name, cost, duration, start_date, status, orgernizer FROM trips
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTrip(ctx context.Context, id int32) (Trip, error) {
	row := q.queryRow(ctx, q.getTripStmt, getTrip, id)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.TripName,
		&i.Cost,
		&i.Duration,
		&i.StartDate,
		&i.Status,
		&i.Orgernizer,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, email, username, status, profile_pic, createdat, updatedat FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Status,
		&i.ProfilePic,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const listInterests = `-- name: ListInterests :many
SELECT id, interest_name, interest_img, updatedat FROM interests
ORDER BY id
`

func (q *Queries) ListInterests(ctx context.Context) ([]Interest, error) {
	rows, err := q.query(ctx, q.listInterestsStmt, listInterests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Interest{}
	for rows.Next() {
		var i Interest
		if err := rows.Scan(
			&i.ID,
			&i.InterestName,
			&i.InterestImg,
			&i.Updatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTripMembers = `-- name: ListTripMembers :many
SELECT id, trip_id, member FROM trip_members 
WHERE trip_id = $1
`

func (q *Queries) ListTripMembers(ctx context.Context, tripID int32) ([]TripMember, error) {
	rows, err := q.query(ctx, q.listTripMembersStmt, listTripMembers, tripID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TripMember{}
	for rows.Next() {
		var i TripMember
		if err := rows.Scan(&i.ID, &i.TripID, &i.Member); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTrips = `-- name: ListTrips :many
SELECT id, trip_name, cost, duration, start_date, status, orgernizer FROM trips
ORDER BY id
`

func (q *Queries) ListTrips(ctx context.Context) ([]Trip, error) {
	rows, err := q.query(ctx, q.listTripsStmt, listTrips)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Trip{}
	for rows.Next() {
		var i Trip
		if err := rows.Scan(
			&i.ID,
			&i.TripName,
			&i.Cost,
			&i.Duration,
			&i.StartDate,
			&i.Status,
			&i.Orgernizer,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, username, status, profile_pic, createdat, updatedat FROM users
ORDER BY createdAt
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.query(ctx, q.listUsersStmt, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Username,
			&i.Status,
			&i.ProfilePic,
			&i.Createdat,
			&i.Updatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
